name: Swift # Will also be the name of the build badge

on:
  push:
    branches: [ master ]

jobs:
  create_code_coverage_badge:
    runs-on: macos-latest
    steps:

    - uses: actions/checkout@v2

    - name: Run tests
      run: swift test --enable-code-coverage

    - name: Calculate Code Coverage
      uses: maxep/spm-lcov-action@0.3.1
      with:
        output-file: coverage.json
        file-format: text

    - name: Extract Coverage Percentage
      id: coverage_step
      # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
      run: echo "::set-output name=coverage::$(cat coverage.json | jq -r ".data[0].totals.lines.percent" | head -c 5)"

    - name: Create Status Badge
      uses: emibcn/badge-action@v1
      with:
        label: 'Code Coverage'
        status: ${{ steps.coverage_step.outputs.coverage }}%
        color: 'orange' #'green'
        path: '.github/badges/coverage.svg'

    # - run: git status
    # - run: git log
    # - run: git branch

    # - name: Push Back Status Badge
    #   run: |
    #     git pull
    #     git config user.name "GitHub Action"
    #     git config user.email "action@github.com"
    #     git add .github/badges/coverage.svg
    #     git commit -m "CI: Updated code coverage status badge"
    #     git push

    - name: Push Back Status Badge
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        # Pushes the `.github/badges/coverage.svg` file to the `codecov` branch
        branch: codecov_badge
        file_pattern: .github/badges/coverage.svg
        commit_message: "CI: Updated code coverage status badge"
        commit_user_name: "GitHub Action"
        commit_user_email: "action@github.com"

  generate_swift_docs:
    runs-on: ubuntu-20.04
    needs: create_code_coverage_badge # The jobs have to run sequentially since they both push
    steps:

      # Letting the push from previous step fully propagate
      - name: Let changes propagate
        run: sleep 10

      - uses: actions/checkout@v2

      - name: Generate Documentation
        uses: SwiftDocOrg/swift-doc@master
        with:
          # Generates HTML documentation, and writes to the `docs` dir
          module-name: Disruptive
          format: html
          output: docs
          base-url: https://vegather.github.io/Disruptive/

      # Need to update permissions for `docs/*` since SwiftDocOrg/swift-doc@master
      # will create files that have the permissions "-rw-------" (read-write for the
      # root user only). These do not provide read access to the current user "runner".
      - name: Update Permissions
        run: 'sudo chown --recursive $USER docs'

      # - run: git status
      # - run: git log
      # - run: git branch

      # - name: Push Back docs
      #   run: |
      #     git pull
      #     git config user.name "GitHub Action"
      #     git config user.email "action@github.com"
      #     git add docs/
      #     git commit -m "CI: Updated Swift documentation"
      #     git push

      - name: Push Back docs
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          # Pushes the `docs` dir to the `docs` branch
          branch: docs
          file_pattern: docs/
          commit_message: "CI: Updated Swift documentation"
          commit_user_name: "GitHub Action"
          commit_user_email: "action@github.com"
