name: Swift # Will also be the name of the build badge

on:
  push:
    branches: [ master ]

jobs:
  create_code_coverage_badge:
    runs-on: macos-latest
    steps:

    - uses: actions/checkout@v2

    - name: Build
      run: swift build -v

    - name: Run tests
      run: swift test --enable-code-coverage

    - name: Code Coverage
      uses: maxep/spm-lcov-action@0.3.1
      with:
        output-file: coverage.json
        file-format: text

    - name: Extract Coverage Percentage
      id: coverage_step
      # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
      run: echo "::set-output name=coverage::$(cat coverage.json | jq -r ".data[0].totals.lines.percent" | head -c 5)"

    - name: Create Status Badge
      uses: emibcn/badge-action@v1
      with:
        label: 'Code Coverage'
        status: ${{ steps.coverage_step.outputs.coverage }}%
        color: 'orange' #'green'
        path: '.github/badges/coverage.svg'

    # - name: Push changes
    #   uses: github-actions-x/commit@v2.6
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     commit-message: "CI: Updated code coverage badge"
    #     files: .github/badges/coverage.svg
    #     email: "action@github.com"
    #     name: "GitHub Action"

    - run: git status

    - name: Push Back docs
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        # Pushes the `docs` dir to the `master` branch
        branch: master
        file_pattern: .github/badges/coverage.svg
        commit_message: "CI: Updated code coverage badge"
        commit_user_name: "GitHub Action"
        commit_user_email: "action@github.com"

  generate_swift_docs:
    runs-on: ubuntu-20.04
    needs: create_code_coverage_badge # The jobs have to run sequentially since they both push
    steps:

      # Letting the push from previous step fully propagate
      - name: Let changes propagate
        run: sleep 5

      - uses: actions/checkout@v2

      - name: Generate Documentation
        uses: SwiftDocOrg/swift-doc@master
        with:
          # Generates HTML documentation, and writes to the `docs` dir
          module-name: Disruptive
          format: html
          output: docs
          base-url: https://vegather.github.io/Disruptive/

      - name: Update Permissions
        run: 'sudo chown --recursive $USER Documentation'

      - run: git status
      - run: ls -lah docs
      - run: ls -lah docs/Role
      - run: cat docs/Role/index.html
      - run: git add docs/
      - run: git status

      # - run: git status
      # - run: pwd
      # - run: ls -lah

      # # Pull down any changes from the previous step that might not yet have propagated when we checked out
      # - name: Pull latest changes
      #   run: git pull

      # - run: git status
      # - run: pwd
      # - run: ls -lah
      
      # - name: Push changes
      #   uses: github-actions-x/commit@v2.6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     commit-message: "CI: Updated Swift documentation"
      #     files: docs/
      #     email: "action@github.com"
      #     name: "GitHub Action"

      - name: Push Back docs
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          # Pushes the `docs` dir to the `master` branch
          branch: master
          file_pattern: docs/
          commit_message: "CI: Updated Swift documentation"
          commit_user_name: "GitHub Action"
          commit_user_email: "action@github.com"
